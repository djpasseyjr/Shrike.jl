var documenterSearchIndex = {"docs":
[{"location":"#Shrike.jl","page":"Shrike.jl","title":"Shrike.jl","text":"","category":"section"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"(Image: Build Status) (Image: codecov) (Image: )","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"(Image: Random Projection Splits)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"Shrike is a Julia package for building ensembles of random projection trees. Random projection trees are a generalization of KD-Trees and are used to quickly approximate nearest neighbors or build k-nearest-neighbor graphs. They conform to low dimensionality that is often present in high dimensional data.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"The implementation here is based on the MRPT algorithm. This package also includes optimizations for knn-graph creation and has built-in support for multithreading.","category":"page"},{"location":"#Installation","page":"Shrike.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"To install just type","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"] add Shrike","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"in the REPL or","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"using Pkg\nPkg.add(\"Shrike\")","category":"page"},{"location":"#Build-an-Index","page":"Shrike.jl","title":"Build an Index","text":"","category":"section"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"To build an ensemble of random projection trees use the ShrikeIndex type.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"using Shrike\nmaxk = 100\nX = rand(100, 10000)\nshi = ShrikeIndex(X, maxk; depth=8, ntrees=10)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"The type accepts a matrix of data, X where each column represents a datapoint.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"maxk represents the maximum number of nearest neighbors you will be able to find with this index.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"maxk is used to set a safe depth for the tree. You can also construct an index without this parameter if you need to.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"depth describes the number of times each random projection tree will split the data. Leaf nodes in the tree contain about npoints / 2^depth data points. Increasing depth increases speed but decreases accuracy. By default, the index sets depth as large as possible.\nntrees controls the number of trees in the ensemble. More trees means more accuracy but more memory.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"In this case, since we need an index that can find the 100 nearest neighbors, setting depth equal to 8 will result in some leaf nodes with less than 100 points. The index will infer this using maxk and set the depth to be as large as possible given maxk. In this case, depth =  6.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"To query the index for approximte 10 nearest neighbors use:","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"k = 10\nq = X[:, 1]\napprox_nn = ann(shi, q, k; vote_cutoff=2)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"The vote_cutoff parameter signifies how many \"votes\" a point needs in order to be included in a linear search. Each tree \"votes\" for the points a leaf node, so if there aren't many point in the leaves and there aren't many trees, the odds of a point receiving more than one vote is low.  Increasing vote_cutoff speeds up the algorithm but may reduce accuracy. When depth is large and ntrees is less than 5, it is reccomended to set vote_cutoff = 1.","category":"page"},{"location":"#KNN-Graphs","page":"Shrike.jl","title":"KNN-Graphs","text":"","category":"section"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"This package includes fast algorithms to generate k-nearest-neighbor graphs and has specialized functions for this purpose. It uses neighbor of neighbor exploration (outlined here) to efficiently improve the accuracy of a knn-graph.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"Nearest neighbor graphs are used to give a sparse topology to large datasets. Their structure can be used to project the data onto a lower dimensional manifold, to cluster datapoints with community detection algorithms or to preform other analyses.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"To generate nearest neighbor graphs:","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"using Shrike\nX = rand(100, 10000)\nshi = ShrikeIndex(X; depth=6, ntrees=5)\nk = 10\ng = knngraph(shi, k; vote_cutoff=1, ne_iters=1, gtype=SimpleDiGraph)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"The vote_cutoff parameter signifies how many \"votes\" a point needs in order to be included in a linear search.\nne_iters controlls how many iterations of neighbor exploration the algorithm will undergo. Successive iterations are increasingly fast. It is reccomened to use more iterations of neighbor exploration when the number of trees is small and less when many trees are used.\nThe gtype parameter allows the user to specify a LightGraphs.jl graph type to return. gtype=identity returns a sparse adjacency matrix.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"If an array of nearest neighbor indices is preferred,","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"nn = allknn(shi, k; vote_cutoff=1, ne_iters=0)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"can be used to generate an shi.npointsxk array of integer indexes where nn[i, :] corresponds to the nearest neighbors of X[:, i]. The keyword arguments work in the same way as in knngraph (outlined above).","category":"page"},{"location":"#Threading","page":"Shrike.jl","title":"Threading","text":"","category":"section"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"Shrike has built in support for multithreading. To allocate multiple threads, start julia with the --threads flag:","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"user@sys:~$ julia --threads 4","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"To see this at work, consider a small scale example:","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"user@sys:~$ cmd=\"using Shrike; shi=ShrikeIndex(rand(100, 10000)); @time knngraph(shi, 10, ne_iters=1)\"\nuser@sys:~$ julia -e \"$cmd\"\n  12.373127 seconds (8.66 M allocations: 4.510 GiB, 6.85% gc time, 18.88% compilation time)\nuser@sys:~$ julia  --threads 4 -e \"$cmd\"\n  6.306410 seconds (8.67 M allocations: 4.498 GiB, 13.12% gc time, 31.64% compilation time)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"(This assumes that Shrike is installed.)","category":"page"},{"location":"#Benchmark","page":"Shrike.jl","title":"Benchmark","text":"","category":"section"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"This package was compared to the original mrpt C++ implementation (on which this algorithm was based), annoy, a popular package for approximate nearest neighbors, and NearestNeighbors.jl, a Julia package for nearest neighbor search. The benchmarks were written in the spirit of ann-benchmarks, a repository for comparing different approximate nearest neighbor algorithms. The datasets used for the benchmark were taken directly from ann-benchmarks. The following are links to the HDF5 files in question: FashionMNIST, SIFT, MNIST and GIST. The benchmarks below were run on a compute cluster, restricting all algorithms to a single thread.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"(Image: FashionMNIST Speed Comparison)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"In this plot, up and to the right is better. (Faster queries, better recall). Each point represents a parameter combination. For a full documentation of parameters run and timing methods consult the original scripts located in the benchmark/ directory.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"This plot illustrates how for this dataset, on most parameter combinations, Shrike has better preformance. Compared to SIFT, below, where some parameter combinations are not as strong. We speculate that this has to do with the high dimensionality of points in FashionMNIST (d=784), compared to the lower dimensionality of SIFT (d=128).","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"(Image: SIFT Speed Comparison)","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"It is important to note that NearestNeighbors.jl was designed to return the exact k-nearest-neighbors as quickly as possible, and does not approximate, hence the high accuracy and lower speed.","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"The takeaway here is that Shrike is fast! It is possibly a little faster than the original C++ implementation. Go Julia! We should note, that Shrike was not benchmarked against state of the art algorithms for approximate nearest neighbor search. These algorithms are faster than annoy and mrpt, but unfortunately, the developers of Shrike aren't familiar with these algorithms.","category":"page"},{"location":"#Function-Documentation","page":"Shrike.jl","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"ShrikeIndex(data::AbstractArray{T, 2}, maxk::Int; depth::Union{Int, Float64}=Inf, ntrees::Int=10) where T","category":"page"},{"location":"#Shrike.ShrikeIndex-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Int64}} where T","page":"Shrike.jl","title":"Shrike.ShrikeIndex","text":"ShrikeIndex(data::AbstractArray{T, 2}, max)k; depth::Union{Int, Float64}=Inf, ntrees::Int=5) -> shi\n\nKeyword argument version of the constructor that includes intended number of nearest neighbors.\n\nIf the default depth is used, the constructor sets the tree depth as deep as possible given max_k. This way, the accuracy/memory tradeoff is determined directly by ntrees and the desired vote_cutoff (vote_cutoff is a parameter passed to ann or knngraph).\n\nIf an argument is passed for depth, constructor attempts to use the supplied depth, but guarentees that the depth of the tree is shallow enough to ensure that each leaf has at least k points. (Without this check, the index may return less than k neighbors when queried.)\n\nParameters\n\ndata: A (dxn) array. Each column is a datapoint with dimension d.\nmax_k: The maximum number of neighbors that will be queried. If intend\n\nto use the ShrikeIndex to approximate at most 10 nearest neigbors of a point, set max_k = 10. This argument is used to infer the deepest tree depth possible so as to maximize speed,\n\nKeyword Arguments\n\nntrees: The number of trees in the index. More trees means more accuracy,\n\nmore memory and less speed. Use this to tune the speed/accuracy tradeoff.\n\ndepth: The number of splits in the tree. Depth of 0 means only a root,\n\ndepth of 1 means root has two children, etc..\n\n\n\n\n\n","category":"method"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"ShrikeIndex(data::AbstractArray{T, 2}, depth::Int, ntrees::Int) where T","category":"page"},{"location":"#Shrike.ShrikeIndex-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Int64, Int64}} where T","page":"Shrike.jl","title":"Shrike.ShrikeIndex","text":"ShrikeIndex(data::Array{T, 2}, depth::Int, ntrees::Int) where T -> ensemble\n\nConstructor for ensemble of sparse random projection trees with voting. Returns ShrikeIndex type. (An ensemble of multiple random projection trees.)\n\n** Type Fields**\n\ndata::Array{T, 2}: Contains all data points\nnpoints::Int: Number of data points\nndims::Int: Dimensionality of the data\ndepth::Int: maximum depth of the tree. (Depth of 0 means only a root, depth of 1 means root has two children)\nntrees::Int: Number of trees to make\nrandom_vectors::AbstractArray: The random projections used to make the tree\nsplits::Array{T, 2}: The split values for each node in each tree stored in a 2D array\nindexes::Array{Array{Int,1}, 2}: 2D array of datapoint indexes at each leaf node in each tree.\n\nNote that RP forest does not store indexes at non-leaf nodes.\n\nFollows the implementation outlined in:\n\nFast Nearest Neighbor Search through Sparse Random Projections and Voting. Ville Hyvönen, Teemu Pitkänen, Sotirios Tasoulis, Elias Jääsaari, Risto Tuomainen, Liang Wang, Jukka Ilmari Corander, Teemu Roos. Proceedings of the 2016 IEEE Conference on Big Data (2016)\n\nwith some modifications.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"ann(shi::ShrikeIndex{T}, q::AbstractArray{T, 2}, k::Int; vote_cutoff=1) where T","category":"page"},{"location":"#Shrike.ann-Union{Tuple{T}, Tuple{ShrikeIndex{T}, AbstractMatrix{T}, Int64}} where T","page":"Shrike.jl","title":"Shrike.ann","text":"approx_knn(shi::ShrikeIndex{T}, q::Array{T, 2}, k::Int; vote_cutoff=1) where T -> knn_idx\n\nFor a query point q, find the approximate k nearest neighbors from the data stored in the the ShrikeIndex. The vote_cutoff parameter signifies how many \"votes\" a point needs in order to be included in a linear search. Increasing vote_cutoff speeds up the algorithm but may reduce accuracy.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"knngraph(shi::ShrikeIndex{T}, k::Int; vote_cutoff::Int=1, ne_iters::Int=0, gtype::G=SimpleDiGraph) where {T, G}","category":"page"},{"location":"#Shrike.knngraph-Union{Tuple{G}, Tuple{T}, Tuple{ShrikeIndex{T}, Int64}} where {T, G}","page":"Shrike.jl","title":"Shrike.knngraph","text":"knngraph(shi::ShrikeIndex{T}, k::Int, vote_cutoff; vote_cutoff::Int=1, ne_iters::Int=0, gtype::G) where {T, G} -> g\n\nReturns a graph with shi.npoints node and k * shi.npoints edges datapoints conneceted to nearest neighbors\n\nParameters\n\nshi: random forest of the desired data\nk: the desired number of nearest neighbors\nvote_cutoff: signifies how many \"votes\" a point needs in order to be included\n\nin a linear search through leaf nodes. Increasing vote_cutoff speeds up the algorithm but may reduce accuracy. Passing too large of a vote_cutoff results in the algorithm resetting vote_cutoff to equal the number of trees.\n\nne_iters: assigns the number of iterations of neighbor exploration to use. Defaults to zero.\n\nNeighbor exploration is a way to increse knn-graph accuracy.\n\ngtype is the type of graph to construct. Defaults to SimpleDiGraph. gtype=identity returns a sparse adjacency matrix.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"explore(i::Int, data::AbstractArray{T}, ann::Array{NeighborExplorer{T}, 1}) where T","category":"page"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"allknn(shi::ShrikeIndex{T}, k::Int; vote_cutoff::Int=1, ne_iters::Int=0) where T","category":"page"},{"location":"#Shrike.allknn-Union{Tuple{T}, Tuple{ShrikeIndex{T}, Int64}} where T","page":"Shrike.jl","title":"Shrike.allknn","text":"allknn(shi::ShrikeIndex{T}, k::Int; vote_cutoff::Int=1, ne_iters::Int=0) where T -> approxnn_array\n\nReturns a shi.npoints by k array of approximate nearest neighbor indexes. That is, approxnn_array[i,:] contains the indexes of the k nearest neighbors of shi.data[:, i].\n\nParameters\n\nThe ne_iters assigns the number of iterations of neighbor exploration to use.\n\nNeighbor exploration is an inexpensive way to increase accuracy.\n\n2, The vote_cutoff parameter signifies how many \"votes\" a point needs in order to be included in a linear search. Increasing vote_cutoff speeds up the algorithm but may reduce accuracy. Passing too large of a vote_cutoff results in the algorithm resetting vote_cutoff to equal the number of trees.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Shrike.jl","title":"Shrike.jl","text":"traverse_tree(shi::ShrikeIndex{T}, x::Array{T, 2}) where T","category":"page"}]
}
